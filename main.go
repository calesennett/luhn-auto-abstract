package main

import (
	"bufio"
	"fmt"
	"math"
	"os"
	"regexp"
	"sort"
	"strings"
)

func main() {
	//scanner := bufio.NewScanner(os.Stdin)
	//for scanner.Scan() {
	//	Summarize(scanner.Text())
	//}
	Summarize("As stated previously, although the machine language generated by a compiler can be executed directly on the hardware, it must nearly always be run along with some other code. Most user programs also require programs from the operating system. Among the most common of these are programs for input and output. The compiler builds calls to required system programs when they are needed by the user program. Before the machine language programs produced by a compiler can be executed, the required programs from the operating system must be found and linked to the user program. The linking operation connects the user program to the system programs by placing the addresses of the entry points of the system programs in the calls to them in the user program. The user and system code together are sometimes called a load module, or executable image. The process of collecting system programs and linking them to user programs is called linking and loading, or sometimes just linking. It is accomplished by a systems program called a linker. ")
}

func Summarize(text string) string {
	// Create list of common English words
	// to exclude from frequency map
	commonWords := commonWords()

	// make map of frequently occuring words
	frequentWords := frequency(strings.ToLower(text), commonWords)
	fmt.Println(frequentWords)
	sentences := strings.Split(text, ". ")
	sentenceScores := scoreSentences(sentences, frequentWords, commonWords)
	for key, val := range sentenceScores {
		fmt.Printf("%v : %v\n\n", key, val)
	}
	return ""
}

func commonWords() []string {
	var commonWords []string
	file, err := os.Open("./commonWords.txt")
	check(err)
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		commonWords = append(commonWords, scanner.Text())
	}
	return commonWords
}

func frequency(text string, common []string) []string {
	frequentWords := make(map[string]int)
	r := regexp.MustCompile("\\.|\\,|;|\n|- ")
	words := strings.Split(r.ReplaceAllString(text, ""), " ")
	for _, word := range words {
		if !contains(common, word) {
			if _, ok := frequentWords[word]; ok {
				frequentWords[word]++
			} else {
				frequentWords[word] = 1
			}
		}
	}

	// Get top 10% of frequent words
	var occs []int
	var topFrequent []string

	for _, num := range frequentWords {
		occs = append(occs, num)
	}
	sort.Sort(sort.Reverse(sort.IntSlice(occs)))
	topTen := int64(math.Floor(float64(len(occs))*0.1 + 0.5))
	occs = occs[:topTen]

	for _, val := range occs {
		for word, occ := range frequentWords {
			if occ == val {
				if !contains(topFrequent, word) {
					topFrequent = append(topFrequent, word)
				}
			}
		}
	}
	return topFrequent
}

func scoreSentences(sentences []string, freqWords []string, common []string) map[string]float64 {
	sentenceScores := make(map[string]float64)
	for _, sentence := range sentences {
		var freqCount, beg, end int
		var begSet bool
		r := regexp.MustCompile("\\,|;|- ")
		s := r.ReplaceAllString(strings.ToLower(sentence), "")
		words := strings.Split(s, " ")
		for i, word := range words {
			if contains(freqWords, word) {
				if beg == 0 && !begSet {
					beg = i
					begSet = true
				}
				freqCount++
				end = i
			}
		}
		sentenceSlice := words[beg : end+1]
		final := []string{}
		for _, word := range sentenceSlice {
			if !contains(common, word) {
				final = append(final, word)
			}
		}
		sentenceScores[sentence] = math.Pow(float64(freqCount), 2) / float64(len(final))
	}
	return sentenceScores
}

func contains(list []string, str string) bool {
	for _, elem := range list {
		if elem == str {
			return true
		}
	}
	return false
}

func check(err error) {
	if err != nil {
		panic(err)
	}
}
